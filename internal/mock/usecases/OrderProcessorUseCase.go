// Code generated by mockery v2.53.4. DO NOT EDIT.

package usecases

import (
	entity "order-placement-system/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrderProcessorUseCase is an autogenerated mock type for the OrderProcessorUseCase type
type OrderProcessorUseCase struct {
	mock.Mock
}

// ProcessOrders provides a mock function with given fields: inputOrders
func (_m *OrderProcessorUseCase) ProcessOrders(inputOrders []*entity.InputOrder) ([]*entity.CleanedOrder, error) {
	ret := _m.Called(inputOrders)

	if len(ret) == 0 {
		panic("no return value specified for ProcessOrders")
	}

	var r0 []*entity.CleanedOrder
	var r1 error
	if rf, ok := ret.Get(0).(func([]*entity.InputOrder) ([]*entity.CleanedOrder, error)); ok {
		return rf(inputOrders)
	}
	if rf, ok := ret.Get(0).(func([]*entity.InputOrder) []*entity.CleanedOrder); ok {
		r0 = rf(inputOrders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.CleanedOrder)
		}
	}

	if rf, ok := ret.Get(1).(func([]*entity.InputOrder) error); ok {
		r1 = rf(inputOrders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderProcessorUseCase creates a new instance of OrderProcessorUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderProcessorUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderProcessorUseCase {
	mock := &OrderProcessorUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
